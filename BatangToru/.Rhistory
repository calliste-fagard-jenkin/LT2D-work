ProduceInitialPlots = function(i){
par(mfrow=c(1,2))
# i is one of the four above datasets
main = i$SpeciesName[1]
hist(i$x, xlab='perpendicular distance',main=main)
hist(i$y, xlab='forward distance',main=main)
hist(i$Radial.Distance, xlab='radial distance',main=main)
plot(i$x,i$y,ylab='forward distance',xlab='perpendicular distance',
main=main)
cat('n =',length(na.omit(i$x)))
cat('\nnumber of (0,0) points =',length(subset(i,i$x==0 & i$y==0)$x))
}
# Just some quick sanity checks
GetDataSetEffort = function(Data){
TransectTotal = 0
for (i in c((1:20)[-c(11,14)])){
A = subset(Data, Data$transect==i)$Effort[1]
TransectTotal = TransectTotal + A
}
return(TransectTotal)
}
if (GetDataSetEffort(Data)!=101){print('checks failed')}
# We define a function which will help us to add object numbers to a dataset
#Edit: - will now also add a size column
addObjectNumbers = function(Dataset){
length = length(Dataset$x)
Dataset$object = rep(NA, length)
Dataset$size = rep(NA, length)
counter = 1
for (i in (1:length)){ # loop through rows
if (!is.na(Dataset$x[i])){
Dataset$object[i] = counter
Dataset$size[i] = 1
counter = counter + 1
}
}
return(Dataset)
}
w = 0.04 ; ystart = 0.035
# We add the area and L columns to the S1 data frame:
S1 = addObjectNumbers(S1)
S1$L = S1$Effort
S1$area = rep(2*w*GetDataSetEffort(S1))
S1$Effort = NULL
b=c(-6,1) ; logphi=c(1,1)  # start values
fit.h1.norm = LT2D.fit(DataFrameInput=S1,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
S1
S1$stratum = rep(1,length(S1$x))
fit.h1.norm = LT2D.fit(DataFrameInput=S1,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.h1.norm$ests
fit.h1.unif = LT2D.fit(DataFrameInput=S1,hr='h1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.h1.unif$ests
install.packages('plotrix')
lubrary('DEVDEV5')
library('DEVDEV5')
ls('package:DEVDEV5')
library(plotrix) # load the library needed to draw the arc on our graph
library('DEVDEV5') # load the development version of the LT2D package
Data = read.csv('GibbonSiamang.csv',header=T) # load the x and y data
Data = subset(Data, Data$Species == 1)
x = Data$PP.Distance ; y = Data$Forward.Distance
# We produce some preliminary plots to see what the data look like:
par(mfrow=c(1,3))
# we want to add a small amount of noise to data points at (0,0) to make it
# clearer in the graph that there is a cluster here:
x_to_plot = x                                      # create vectors to
y_to_plot = y                                      # fill with values
for (i in (1:length(x))){                          # loop through and add noise
if (x[i]==0 & y[i]==0){                          # where it's required
x_to_plot[i] = x[i] + runif(1,0,0.002)
y_to_plot[i] = y[i] + runif(1,0,0.002)
}
}
pdlab="Perpendicular distance"
fdlab="Forward distance"
plot(x_to_plot,y_to_plot,pch="+",ylab=fdlab,xlab=pdlab)
rmin = sort(unique(Data$Radial.Distance))[2] # Calculate Rmin
draw.arc(0,0,radius=rmin,deg1=0,deg2=360,col="red",lwd=1)
legend(0.0113,0.065,"Radius Rmin",lty=1,col="red")
hist(y,breaks=seq(0,max(na.omit(y)),length=9),xlab=fdlab,main="")
hist(x,breaks=seq(0,max(na.omit(x)),length=13),xlab=pdlab,main="")
par(mfrow=c(1,1))
R = Data$Radial.Distance
hist(R, breaks = 22, main="Radial distances of detections")
w=0.05;ystart=0.065 # set these to use in all our fits
stratum = rep(1, length(x))
transect = rep(1, length(x))
object = seq(1, length(x))
size = rep(1, length(x))
L = rep(4*52, length(x))    # do we times this by the 52 visits?
area = rep(4*52*2*w, length(x))
df = data.frame(y,x,stratum, transect, object, size, L, area)
df.zeros = df
# H1 in the LT2D package is the Haynes and Buckland Hazard rate.
# Normal bump with hazard h1:
b=c(-6.82664896,1.09392846) ; logphi=c(-0.03503625,0.51044374)  # start values
fit.h1 = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.h1$ests
# par(mfrow=c(1,1))
# gof.LT2D(fit.n,plot=T)
# plot(fit.n,xbins=20,ybins=32,smooth.fy=TRUE,addrug=TRUE)
# phatInterval(fit.n)*w #EHSW
# fit.n$p0 # p(0)
# Normal dip: --  bad ks gof in x --  problem with hessian inversion
b=c(-6,1) ; logphi=c(1,-4)
fit.h1.chn = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.chnorm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.h1.chn$ests
# Uniform with h1 -- bad ks gof in x --
b=c(-7.0744154,0.9876447)
fit.h1.unif = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.h1.unif$ests
# ip1 with normal bump: -- bad ks gof in x -- p0 low --
b=c(5.2919208, -0.2205593, 8.4701307) ; logphi=c(0.01784102, -4.42209067)
fit.ip1 = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.ip1$ests
# uniform ip1
fit.ip1.unif = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.ip1.unif$ests
# Normal bump with ip0 hazard function: -- P0 estimated < 1 --
b=c(4.44687169, 7.73454600); logphi=c(8.60409236, 0.01086241)
fit.ip0 = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.ip0$ests
fit.ip0.unif = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.ip0.unif$ests
# H1 AICs
fit.h1$fit$AIC ; fit.h1.chn$fit$AIC ; fit.h1.unif$fit$AIC
# ip1 AICs
fit.ip1$fit$AIC ; fit.ip1.unif$fit$AIC
#ip0 AICs
fit.ip0$fit$AIC ; fit.ip0.unif$fit$AIC
df = data.frame(x,y)                  # fast way to remove all the
df = subset(df, sqrt(x**2+y**2)>rmin) # (0,0) values
x = df$x ; y = df$y
stratum = rep(1, length(x))
transect = rep(1, length(x))
object = seq(1, length(x))
size = rep(1, length(x))
L = rep(4*52, length(x))    # do we times this by the 52 visits?
area = rep(4*52*2*w, length(x))
df = data.frame(y,x,stratum, transect, object, size, L, area)
b=c(-6.82664896,1.09392846) ; logphi=c(-0.03503625,0.51044374)  # start values
fit.h1.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.h1.nz$ests
# Normal dip: --- doesn't fit ---
b=c(-6,1) ; logphi=c(1,-3)
fit.h1.chn.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.chnorm',
logphi=logphi,w=w, hessian=TRUE)
fit.h1.chn.nz$ests
# Uniform with h1 -- bad ks gof in x --
b = c(-7,1)
fit.h1.unif.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.h1.unif.nz$ests
# ip1 with normal bump: -- bad ks gof in x -- p0 low --
b = c(8.4300894,-4.4119375,1.2712169); logphi=c(3,0.8553059)
fit.ip1.nz = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.ip1.nz$ests
fit.ip1.nz$fit$par
# uniform ip1
fit.ip1.unif.nz = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.ip1.unif.nz$ests
# Normal bump with ip0 hazard function: -- P0 estimated < 1 --
b=c(4.44687169, 7.73454600); logphi=c(8.60409236, 0.01086241)
fit.ip0.nz = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.ip0.nz$ests
fit.ip0.unif.nz = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.ip0.unif.nz$ests
library(Distance)
df = df.zeros
# We add some columns to have the correct names
df$Area = df$area ; df$Sample.Label = df$transect ; df$Region.Label = df$stratum
df$distance = df$x ; df$Effort = df$L
# fitting models:
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = "0%", quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = "0%", quiet = TRUE)
mod.hn.cos <- ds(data=df, transect = "line",
key = "hn", adjustment = "cos",truncation = "0%", quiet = TRUE)
mod.hr.cos <- ds(data=df, transect = "line",
key = "hr", adjustment = "cos",truncation = "0%", quiet = TRUE)
mod.hn.sim <- ds(data=df, transect = "line",
key = "hn", adjustment = "poly",truncation = "0%", quiet = TRUE)
mod.hr.sim <- ds(data=df, transect = "line",
key = "hr", adjustment = "poly",truncation = "0%", quiet = TRUE)
mod.hn$ddf$Nhat # Half normal detection function
mod.hz$ddf$Nhat # Hazard rate detection function
mod.hz$ddf$fitted
# A1:
mod.hz$ddf$model
mod.hz$ddf$dsmodel
AIC(mod.hn)
summarize_ds_models(mod.hn)
ds.gof(mod.hn)
summarize_ds_models(mod.hn)
GOF = ds.gof(mod.hn)
GOF
plot(mod.hn, xlab="Distance / Km")
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz)
if (.Platform$OS.type == "unix"){          # Set the wd to the location
setwd("~/Documents/2017 - SummerProj")   # of the source code
} else {
setwd("F:/Cal/2017 - SummerProj")
}
require(devtools)
remove.packages('DEVDEV5')
install('DEVDEV5')
library('DEVDEV5')
plot(fit.h1.unif.nz)
traceback()
if (.Platform$OS.type == "unix"){          # Set the wd to the location
setwd("~/Documents/2017 - SummerProj")   # of the source code
} else {
setwd("F:/Cal/2017 - SummerProj")
}
require(devtools)
remove.packages('DEVDEV5')
install('DEVDEV5')
library('DEVDEV5')
library('DEVDEV5') # load the development version of the LT2D package
Data = read.csv('GibbonSiamang.csv',header=T) # load the x and y data
Data = subset(Data, Data$Species == 1)
x = Data$PP.Distance ; y = Data$Forward.Distance
par(mfrow=c(1,3))
# we want to add a small amount of noise to data points at (0,0) to make it
# clearer in the graph that there is a cluster here:
x_to_plot = x                                      # create vectors to
y_to_plot = y                                      # fill with values
for (i in (1:length(x))){                          # loop through and add noise
if (x[i]==0 & y[i]==0){                          # where it's required
x_to_plot[i] = x[i] + runif(1,0,0.002)
y_to_plot[i] = y[i] + runif(1,0,0.002)
}
}
pdlab="Perpendicular distance"
fdlab="Forward distance"
plot(x_to_plot,y_to_plot,pch="+",ylab=fdlab,xlab=pdlab)
rmin = sort(unique(Data$Radial.Distance))[2] # Calculate Rmin
draw.arc(0,0,radius=rmin,deg1=0,deg2=360,col="red",lwd=1)
legend(0.0113,0.065,"Radius Rmin",lty=1,col="red")
hist(y,breaks=seq(0,max(na.omit(y)),length=9),xlab=fdlab,main="")
hist(x,breaks=seq(0,max(na.omit(x)),length=13),xlab=pdlab,main="")
par(mfrow=c(1,1))
R = Data$Radial.Distance
hist(R, breaks = 22, main="Radial distances of detections")
w=0.05;ystart=0.065 # set these to use in all our fits
stratum = rep(1, length(x))
transect = rep(1, length(x))
object = seq(1, length(x))
size = rep(1, length(x))
L = rep(4*52, length(x))    # do we times this by the 52 visits?
area = rep(4*52*2*w, length(x))
df = data.frame(y,x,stratum, transect, object, size, L, area)
df.zeros = df
b=c(-6.82664896,1.09392846) ; logphi=c(-0.03503625,0.51044374)  # start values
fit.h1 = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.h1$ests
# par(mfrow=c(1,1))
# gof.LT2D(fit.n,plot=T)
# plot(fit.n,xbins=20,ybins=32,smooth.fy=TRUE,addrug=TRUE)
# phatInterval(fit.n)*w #EHSW
# fit.n$p0 # p(0)
# Normal dip: --  bad ks gof in x --  problem with hessian inversion
b=c(-6,1) ; logphi=c(1,-4)
fit.h1.chn = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.chnorm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.h1.chn$ests
# Uniform with h1 -- bad ks gof in x --
b=c(-7.0744154,0.9876447)
fit.h1.unif = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.h1.unif$ests
# ip1 with normal bump: -- bad ks gof in x -- p0 low --
b=c(5.2919208, -0.2205593, 8.4701307) ; logphi=c(0.01784102, -4.42209067)
fit.ip1 = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.ip1$ests
# uniform ip1
fit.ip1.unif = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.ip1.unif$ests
# Normal bump with ip0 hazard function: -- P0 estimated < 1 --
b=c(4.44687169, 7.73454600); logphi=c(8.60409236, 0.01086241)
fit.ip0 = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, rmin=rmin, hessian=TRUE)
fit.ip0$ests
fit.ip0.unif = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, rmin=rmin, hessian=TRUE)
fit.ip0.unif$ests
```{r}
df = data.frame(x,y)                  # fast way to remove all the
df = subset(df, sqrt(x**2+y**2)>rmin) # (0,0) values
x = df$x ; y = df$y
stratum = rep(1, length(x))
transect = rep(1, length(x))
object = seq(1, length(x))
size = rep(1, length(x))
L = rep(4*52, length(x))    # do we times this by the 52 visits?
area = rep(4*52*2*w, length(x))
df = data.frame(y,x,stratum, transect, object, size, L, area)
b=c(-6.82664896,1.09392846) ; logphi=c(-0.03503625,0.51044374)  # start values
fit.h1.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.h1.nz$ests
# Normal dip: --- doesn't fit ---
b=c(-6,1) ; logphi=c(1,-3)
fit.h1.chn.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.chnorm',
logphi=logphi,w=w, hessian=TRUE)
fit.h1.chn.nz$ests
# Uniform with h1 -- bad ks gof in x --
b = c(-7,1)
fit.h1.unif.nz = LT2D.fit(DataFrameInput=df,hr='h1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
# ip1 with normal bump: -- bad ks gof in x -- p0 low --
b = c(8.4300894,-4.4119375,1.2712169); logphi=c(3,0.8553059)
fit.ip1.nz = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.ip1.nz$ests
fit.ip1.nz$fit$par
# uniform ip1
fit.ip1.unif.nz = LT2D.fit(DataFrameInput=df,hr='ip1',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.ip1.unif.nz$ests
# Normal bump with ip0 hazard function: -- P0 estimated < 1 --
b=c(4.44687169, 7.73454600); logphi=c(8.60409236, 0.01086241)
fit.ip0.nz = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.norm',
logphi=logphi,w=w, hessian=TRUE)
fit.ip0.nz$ests
fit.ip0.unif.nz = LT2D.fit(DataFrameInput=df,hr='ip0',b=b,ystart=ystart,pi.x='pi.const',
logphi=NULL,w=w, hessian=TRUE)
fit.ip0.unif.nz$ests
fit.h1.nz$fit$AIC ; fit.h1.chn.nz$fit$AIC ; fit.h1.unif.nz$fit$AIC
# ip1 AICs
fit.ip1.nz$fit$AIC ; fit.ip1.unif.nz$fit$AIC
#ip0 AICs
fit.ip0.nz$fit$AIC ; fit.ip0.unif.nz$fit$AIC
library(Distance)
#df = df.zeros
# We add some columns to have the correct names
df$Area = df$area ; df$Sample.Label = df$transect ; df$Region.Label = df$stratum
df$distance = df$x ; df$Effort = df$L
# fitting models:
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = "0%", quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = "0%", quiet = TRUE)
mod.hn.cos <- ds(data=df, transect = "line",
key = "hn", adjustment = "cos",truncation = "0%", quiet = TRUE)
mod.hr.cos <- ds(data=df, transect = "line",
key = "hr", adjustment = "cos",truncation = "0%", quiet = TRUE)
mod.hn.sim <- ds(data=df, transect = "line",
key = "hn", adjustment = "poly",truncation = "0%", quiet = TRUE)
mod.hr.sim <- ds(data=df, transect = "line",
key = "hr", adjustment = "poly",truncation = "0%", quiet = TRUE)
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
plot(mod.hz, xlab="Distance / Km")
class(fit.h1.unif.nz)
plot(fit.h1.unif.nz)
traceback()
methods(plot)
getwd()
setwd()
setwd(''DEVDEV5)
setwd('DEVDEV5')
getwd()
roxygenise()
roxygenize()
library(roxygen2)
library('devtools')
roxygenise()
document()
if (.Platform$OS.type == "unix"){          # Set the wd to the location
setwd("~/Documents/2017 - SummerProj")   # of the source code
} else {
setwd("F:/Cal/2017 - SummerProj")
}
require(devtools)
remove.packages('DEVDEV5')
install('DEVDEV5')
library('DEVDEV5')
plot(fit.h1.unif.nz)
library('DEVDEV5')
plot(fit.h1.unif.nz)
methods(plot)
document()
getwd()
setwd('DEVDEV5')
document()
if (.Platform$OS.type == "unix"){          # Set the wd to the location
setwd("~/Documents/2017 - SummerProj")   # of the source code
} else {
setwd("F:/Cal/2017 - SummerProj")
}
require(devtools)
remove.packages('DEVDEV5')
install('DEVDEV5')
library('DEVDEV5')
plot(fit.h1.unif.nz)
plot(fit.h1.unif.nz, xbins = 20)
plot(fit.h1.unif.nz, xbins = 10)
plot(mod.hz, xlab="Distance / Km")
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
df$Area = df$area ; df$Sample.Label = df$transect ; df$Region.Label = df$stratum
df$distance = df$x ; df$Effort = df$L
df$x = NULL ; df$y = NULL
# fitting models:
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = "0%", quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = "0%", quiet = TRUE)
mod.hn.cos <- ds(data=df, transect = "line",
key = "hn", adjustment = "cos",truncation = "0%", quiet = TRUE)
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = w, quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = w, quiet = TRUE)
mod.hn$ddf$Nhat # Half normal detection function
mod.hz$ddf$Nhat # Hazard rate detection function
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = w, quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = w, quiet = TRUE)
mod.hn.cos <- ds(data=df, transect = "line",
key = "hn", adjustment = "cos",truncation = w, quiet = TRUE)
mod.hr.cos <- ds(data=df, transect = "line",
key = "hr", adjustment = "cos",truncation = w, quiet = TRUE)
mod.hn.sim <- ds(data=df, transect = "line",
key = "hn", adjustment = "poly",truncation = w, quiet = TRUE)
mod.hr.sim <- ds(data=df, transect = "line",
key = "hr", adjustment = "poly",truncation = w, quiet = TRUE)
mod.hn$ddf$Nhat # Half normal detection function
mod.hz$ddf$Nhat # Hazard rate detection function
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
mod.hn$ddf$Nhat # Half normal detection function
mod.hz$ddf$Nhat # Hazard rate detection function
if (.Platform$OS.type == "unix"){          # Set the wd to the location
setwd("~/Documents/2017 - SummerProj")   # of the source code
} else {
setwd("F:/Cal/2017 - SummerProj")
}
require(devtools)
remove.packages('DEVDEV5')
install('DEVDEV5')
library('DEVDEV5')
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
gof.LT2D(fit.h1.chn.nz)
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
# A1:
GOF
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
GOF
gof.LT2D(fit.h1.chn.nz, plot = TRUE)
GOF = ds.gof(mod.hz) # CDS fit seems very reasonable...
GOF
GOF = ds.gof(mod.hz, main = 'CDS') # CDS fit seems very reasonable...
GOF = ds.gof(mod.hz, main = 'CDS') # CDS fit seems very reasonable...
gof.LT2D(fit.h1.chn.nz, plot = TRUE, main = 'LT2D')
gof.LT2D(fit.h1.chn.nz, plot = TRUE)
source('F:/Cal/2017 - SummerProj/Gibbon Paper/GibbonAnalysisCode.R')
getwd()
setwd("F:/Cal/2017 - SummerProj/Gibbon Paper")
source('F:/Cal/2017 - SummerProj/Gibbon Paper/GibbonAnalysisCode.R')
summarize_ds_models(mod.hn, mod.hz, mod.hn.cos, mod.hr.cos)
GOF = ds.gof(mod.hz, main = 'CDS') # CDS fit seems very reasonable...
GOF
gof.LT2D(fit.h1.chn.nz, plot = TRUE)
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
GOF
GOF$dsgof$ks
GOF
df
subset(df, df$distance < w)
GOF = ds.gof(mod.hz, main = 'CDS') # CDS fit seems very reasonable...
GOF$dsgof
GOF$dsgof$edf
GOF
mod.hn <- ds(data=df, transect = "line",
key = "hn", adjustment = NULL, truncation = w, quiet = TRUE)
mod.hz <- ds(data=df, transect = "line",
key = "hr", adjustment = NULL,truncation = w, quiet = TRUE)
summarize_ds_models(mod.hn, mod.hz)
GOF = ds.gof(mod.hz, main = 'CDS'
plot(mod.hz, xlab="Distance / Km")
plot(fit.h1.unif.nz, xbins = 7)
plot(mod.hz, xlab="Distance / Km", main='CDS')
plot(fit.h1.unif.nz, xbins = 7)
?ds
