}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
return(ls)
ls <- matrix(unlist(ls),ncol=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
set.seed(962018)
a <- simulation(4, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda, Lsim, Asim,
produce.mixt.df)
a
a <- list(c('a','b'),c('a','b'),c('a','b'),c('a','b'),c('a','b'),c('a','b'))
matrix(unlist(a),ncol=2)
matrix(unlist(a),nrow=2)
# This document serves as a simulation study on the use of 2 part mixture models
# for the perpendicular densities of LT2D analyses
# Load the LT2D package, this also loads parallelization libraries:
library(LT2D)
produce.mixt.df <- function(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim){
# purpose : Produces a smiluated data frame from a population with chosen
#           parameters. Currently not designed to work in conjuction with
#           covariate inclusion.
#
# output  : A data.frame in the style required by the LT2D software to
#           estimate MLEs and produce an estimate of abundance
# produce the simulated data from each component:
comp1 <- simXY(floor(N*lambda), pi.x, logphi1, hr, b, w, ystart)$locs
comp2 <- simXY(floor(N*(1-lambda)), pi.x, logphi2, hr, b, w, ystart)$locs
# get the number of observations:
n <- (length(c(comp1$x,comp2$x)))
# produce the LT2D format data.frame:
mixt.df <- data.frame(x = c(comp1$x, comp2$x),
y = c(comp1$y, comp2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
return(mixt.df)
}
simulation <- function(R, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df){
# purpose : Produces R simulated data sets with the chosen parameters,
#           then fits the data using a mixture and regular LT2D model, to
#           produce estimates of bias
#
# output  : A list, with elements mixt.bias, reg.bias, mixt.ests and reg.ests
# Create the clusters and initiate paralellisation:
cl<-makeCluster(detectCores())
registerDoParallel(cl)
# Do the parallel loop:
ls <- foreach(i=1:R, .packages = 'LT2D') %dopar% {
# 1. Get the data:
df <- produce.mixt.df(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim)
# 2. Fit a normal model:
F1 <- try(LT2D.fit(DataFrameInput = df, hr = hr, b=b, ystart=ystart,
pi.x=pi.x, logphi=logphi1, w=w), silent = T)
# 3. Fit a mixture model:
F2 <- try(LT2D.mixture(df, hr, b, ystart, pi.x, logphi1, logphi2, w,
qlogis(lambda)), silent = T)
# 4. If either model failed, we can't use the information:
if (class(F1)=='try-error' | class(F2)=='try-error'){
to.ls <- c(NA, NA)
}
# 5. Otherwise, update the information
else{
N.mixt <- F1$ests$N ; N.mixt <- N.mixt[length(N.mixt)]
N.reg <- F2$ests$N ; N.reg <- N.reg[length(N.reg)]
to.ls <- c(N.mixt, N.reg)
}
}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
return(ls)
ls <- matrix(unlist(ls),nrow=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
set.seed(962018)
simulation(4, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda, Lsim, Asim,
produce.mixt.df)
# This document serves as a simulation study on the use of 2 part mixture models
# for the perpendicular densities of LT2D analyses
# Load the LT2D package, this also loads parallelization libraries:
library(LT2D)
produce.mixt.df <- function(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim){
# purpose : Produces a smiluated data frame from a population with chosen
#           parameters. Currently not designed to work in conjuction with
#           covariate inclusion.
#
# output  : A data.frame in the style required by the LT2D software to
#           estimate MLEs and produce an estimate of abundance
# produce the simulated data from each component:
comp1 <- simXY(floor(N*lambda), pi.x, logphi1, hr, b, w, ystart)$locs
comp2 <- simXY(floor(N*(1-lambda)), pi.x, logphi2, hr, b, w, ystart)$locs
# get the number of observations:
n <- (length(c(comp1$x,comp2$x)))
# produce the LT2D format data.frame:
mixt.df <- data.frame(x = c(comp1$x, comp2$x),
y = c(comp1$y, comp2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
return(mixt.df)
}
simulation <- function(R, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df){
# purpose : Produces R simulated data sets with the chosen parameters,
#           then fits the data using a mixture and regular LT2D model, to
#           produce estimates of bias
#
# output  : A list, with elements mixt.bias, reg.bias, mixt.ests and reg.ests
# Create the clusters and initiate paralellisation:
cl<-makeCluster(detectCores())
registerDoParallel(cl)
# Do the parallel loop:
ls <- foreach(i=1:R, .packages = 'LT2D') %dopar% {
# 1. Get the data:
df <- produce.mixt.df(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim)
# 2. Fit a normal model:
F1 <- try(LT2D.fit(DataFrameInput = df, hr = hr, b=b, ystart=ystart,
pi.x=pi.x, logphi=logphi1, w=w), silent = T)
# 3. Fit a mixture model:
F2 <- try(LT2D.mixture(df, hr, b, ystart, pi.x, logphi1, logphi2, w,
qlogis(lambda)), silent = T)
# 4. If either model failed, we can't use the information:
if (class(F1)=='try-error' | class(F2)=='try-error'){
to.ls <- c(NA, NA)
}
# 5. Otherwise, update the information
else{
N.mixt <- F1$ests$N ; N.mixt <- N.mixt[length(N.mixt)]
N.reg <- F2$ests$N ; N.reg <- N.reg[length(N.reg)]
to.ls <- c(N.mixt, N.reg)
}
}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
ls <- matrix(unlist(ls),nrow=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
set.seed(962018)
simulation(4, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda, Lsim, Asim,
produce.mixt.df)
# This document serves as a simulation study on the use of 2 part mixture models
# for the perpendicular densities of LT2D analyses
# Load the LT2D package, this also loads parallelization libraries:
library(LT2D)
produce.mixt.df <- function(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim){
# purpose : Produces a smiluated data frame from a population with chosen
#           parameters. Currently not designed to work in conjuction with
#           covariate inclusion.
#
# output  : A data.frame in the style required by the LT2D software to
#           estimate MLEs and produce an estimate of abundance
# produce the simulated data from each component:
comp1 <- simXY(floor(N*lambda), pi.x, logphi1, hr, b, w, ystart)$locs
comp2 <- simXY(floor(N*(1-lambda)), pi.x, logphi2, hr, b, w, ystart)$locs
# get the number of observations:
n <- (length(c(comp1$x,comp2$x)))
# produce the LT2D format data.frame:
mixt.df <- data.frame(x = c(comp1$x, comp2$x),
y = c(comp1$y, comp2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
return(mixt.df)
}
simulation <- function(R, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df){
# purpose : Produces R simulated data sets with the chosen parameters,
#           then fits the data using a mixture and regular LT2D model, to
#           produce estimates of bias
#
# output  : A list, with elements mixt.bias, reg.bias, mixt.ests and reg.ests
# Create the clusters and initiate paralellisation:
cl<-makeCluster(detectCores())
registerDoParallel(cl)
# Do the parallel loop:
ls <- foreach(i=1:R, .packages = 'LT2D') %dopar% {
# 1. Get the data:
df <- produce.mixt.df(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim)
# 2. Fit a normal model:
F1 <- try(LT2D.fit(DataFrameInput = df, hr = hr, b=b, ystart=ystart,
pi.x=pi.x, logphi=logphi1, w=w), silent = T)
# 3. Fit a mixture model:
F2 <- try(LT2D.mixture(df, hr, b, ystart, pi.x, logphi1, logphi2, w,
qlogis(lambda)), silent = T)
# 4. If either model failed, we can't use the information:
if (class(F1)=='try-error' | class(F2)=='try-error'){
to.ls <- c(NA, NA)
}
# 5. Otherwise, update the information
else{
N.mixt <- F1$ests$N ; N.mixt <- N.mixt[length(N.mixt)]
N.reg <- F2$ests$N ; N.reg <- N.reg[length(N.reg)]
to.ls <- c(N.mixt, N.reg)
}
}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
ls <- matrix(unlist(ls),nrow=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
set.seed(962018)
s1 <- simulation(100, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda, Lsim, Asim,
produce.mixt.df)
s1
# This document serves as a simulation study on the use of 2 part mixture models
# for the perpendicular densities of LT2D analyses
# Load the LT2D package, this also loads parallelization libraries:
library(LT2D)
produce.mixt.df <- function(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim){
# purpose : Produces a smiluated data frame from a population with chosen
#           parameters. Currently not designed to work in conjuction with
#           covariate inclusion.
#
# output  : A data.frame in the style required by the LT2D software to
#           estimate MLEs and produce an estimate of abundance
# produce the simulated data from each component:
comp1 <- simXY(floor(N*lambda), pi.x, logphi1, hr, b, w, ystart)$locs
comp2 <- simXY(floor(N*(1-lambda)), pi.x, logphi2, hr, b, w, ystart)$locs
# get the number of observations:
n <- (length(c(comp1$x,comp2$x)))
# produce the LT2D format data.frame:
mixt.df <- data.frame(x = c(comp1$x, comp2$x),
y = c(comp1$y, comp2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
return(mixt.df)
}
simulation <- function(R, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df){
# purpose : Produces R simulated data sets with the chosen parameters,
#           then fits the data using a mixture and regular LT2D model, to
#           produce estimates of bias
#
# output  : A list, with elements mixt.bias, reg.bias, mixt.ests and reg.ests
# Create the clusters and initiate paralellisation:
cl<-makeCluster(detectCores())
registerDoParallel(cl)
# Do the parallel loop:
ls <- foreach(i=1:R, .packages = 'LT2D') %dopar% {
# 1. Get the data:
df <- produce.mixt.df(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim)
# 2. Fit a normal model:
F1 <- try(LT2D.fit(DataFrameInput = df, hr = hr, b=b, ystart=ystart,
pi.x=pi.x, logphi=logphi1, w=w), silent = T)
# 3. Fit a mixture model:
F2 <- try(LT2D.mixture(df, hr, b, ystart, pi.x, logphi1, logphi2, w,
qlogis(lambda)), silent = T)
# 4. If either model failed, we can't use the information:
if (class(F1)=='try-error' | class(F2)=='try-error'){
to.ls <- c(NA, NA)
}
# 5. Otherwise, update the information
else{
N.mixt <- F1$ests$N ; N.mixt <- N.mixt[length(N.mixt)]
N.reg <- F2$ests$N ; N.reg <- N.reg[length(N.reg)]
to.ls <- c(N.mixt, N.reg)
}
}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
ls <- matrix(unlist(ls),nrow=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
set.seed(962018)
s1 <- simulation(500, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda, Lsim, Asim,
produce.mixt.df)
s1
N <- 1000
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
mixt.b <- c(1,-0.5)
mixtdat1 <- simXY(N*lambda, 'pi.norm', logphi1, 'h1', mixt.b, w,
ystart)$locs
mixtdat2 <- simXY(N*(1-lambda), 'pi.norm', logphi2, 'h1', mixt.b, w,
ystart)$locs
n <- (length(c(mixtdat1$x,mixtdat2$x)))
mixt.df <- data.frame(x = c(mixtdat1$x, mixtdat2$x),
y = c(mixtdat1$y, mixtdat2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
mixt.df.1 <- data.frame(x = mixtdat1$x,
y = mixtdat1$y,
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:length(mixtdat1$x),
size = 1)
mixt.df.2 <- data.frame(x = mixtdat2$x,
y = mixtdat2$y,
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:length(mixtdat2$x),
size = 1)
# using the mixture:
test.3 <- LT2D.mixture(mixt.df, 'h1', c(0.9577, -0.5460), ystart,
'pi.norm', c(-0.004115, -3.6987), c(0.03577, -3.928), w,
1.0407,
hessian = T)
test.3$ests$N
N <- 1000
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
mixt.b <- c(1,-0.5)
mixtdat1 <- simXY(N*lambda, 'pi.norm', logphi1, 'h1', mixt.b, w,
ystart)$locs
mixtdat2 <- simXY(N*(1-lambda), 'pi.norm', logphi2, 'h1', mixt.b, w,
ystart)$locs
n <- (length(c(mixtdat1$x,mixtdat2$x)))
mixt.df <- data.frame(x = c(mixtdat1$x, mixtdat2$x),
y = c(mixtdat1$y, mixtdat2$y),
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:n,
size = 1)
mixt.df.1 <- data.frame(x = mixtdat1$x,
y = mixtdat1$y,
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:length(mixtdat1$x),
size = 1)
mixt.df.2 <- data.frame(x = mixtdat2$x,
y = mixtdat2$y,
stratum = 1,
transect = 1,
area = Asim,
L = Lsim,
object = 1:length(mixtdat2$x),
size = 1)
# using the mixture:
test.3 <- LT2D.mixture(mixt.df, 'h1', c(0.9577, -0.5460), ystart,
'pi.norm', c(-0.004115, -3.6987), c(0.03577, -3.928), w,
1.0407,
hessian = T)
test.3$ests$N
s2 <- simulation(10, N, pi.x, logphi1, c(1,-4), hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df)
s2 <- simulation(10, N, pi.x, logphi1, c(0,-4), hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df)
s2
s2 <- simulation(10, N, pi.x, logphi1, c(0.5,-4), hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df)
s2
s2 <- simulation(10, N, pi.x, logphi1, c(0.5,-4), hr, b, w, ystart, 0.8,
Lsim, Asim, produce.mixt.df)
s2
s2 <- simulation(10, N, pi.x, logphi1, c(0.5,-4), hr, b, w, ystart, 0.8,
Lsim, Asim, produce.mixt.df)
s2
s2 <- simulation(100, N, pi.x, logphi1, c(0.5,-4), hr, b, w, ystart, 0.8,
Lsim, Asim, produce.mixt.df)
s2
sum(abs(s2$mixt.ests-1000)<abs(s2$regu.ests-1000))
sum(abs(s1$mixt.ests-1000)<abs(s1$regu.ests-1000))
hist(abs(s2$mixt.ests-1000))
hist(abs(s1$mixt.ests-1000))
hist(abs(s1$mixt.ests-1000)*100)
hist(abs(s1$mixt.ests-1000)/1000)
hist(abs(s1$mixt.regu-1000)/1000)
hist(abs(s1$regu.ests-1000)/1000)
hist(abs(s1$mixt.ests-1000)/1000, nreaks = 20)
hist(abs(s1$mixt.ests-1000)/1000, breaks = 20)
hist(abs(s1$mixt.ests-1000)/1000, breaks = 20)
set.seed(972018)
s2 <- simulation(500, N, pi.x, logphi1, c(0.5,-4), hr, b, w, ystart, 0.8,
Lsim, Asim, produce.mixt.df)
s2
save.image("~/github-cfj/LT2D-work/simEnv.RData")
