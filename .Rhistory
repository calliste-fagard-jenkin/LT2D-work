area = Asim,
L = Lsim,
object = 1:n,
size = 1)
return(mixt.df)
}
simulation <- function(R, N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim, produce.mixt.df, perfect.convergence = T){
# purpose : Produces R simulated data sets with the chosen parameters,
#           then fits the data using a mixture and regular LT2D model, to
#           produce estimates of bias
#
# output  : A list, with elements mixt.bias, reg.bias, mixt.ests and reg.ests
# Create the clusters and initiate paralellisation:
cl<-makeCluster(detectCores())
registerDoParallel(cl)
# Do the parallel loop:
ls <- foreach(i=1:R, .packages = 'LT2D') %dopar% {
# 1. Get the data:
df <- produce.mixt.df(N, pi.x, logphi1, logphi2, hr, b, w, ystart, lambda,
Lsim, Asim)
# 2. Fit a normal model:
F1 <- try(LT2D.fit(DataFrameInput = df, hr = hr, b=b, ystart=ystart,
pi.x=pi.x, logphi=logphi1, w=w), silent = T)
# 3. Fit a mixture model:
F2 <- try(LT2D.mixture(df, hr, b, ystart, pi.x, logphi1, logphi2, w,
qlogis(lambda)), silent = T)
# 4. If either model failed, we can't use the information:
if (class(F1)=='try-error' | class(F2)=='try-error'){
to.ls <- c(NA, NA)
}
# if perfect.convergence == TRUE, only include the results if the models
# both converged as well as possible
else if (perfect.convergence &
(F1$fit$convergence!=0 | F2$fit$convergence!=0)){
to.ls <- c(NA, NA)
}
# 5. Otherwise, update the information
else{
N.mixt <- F1$ests$N ; N.mixt <- N.mixt[length(N.mixt)]
N.reg <- F2$ests$N ; N.reg <- N.reg[length(N.reg)]
to.ls <- c(N.mixt, N.reg)
}
}
# Silently close the ports:
try(stopCluster(cl), silent = T)
# 6. Calculate bias and return info
ls <- matrix(unlist(ls),nrow=2)
mixt.Ns <- na.omit(ls[1,])
regu.Ns <- na.omit(ls[2,])
N <- floor(N*lambda) + floor(N*(1-lambda))
mixt.bias <- 100*(mean(mixt.Ns)-N)/N
regu.bias <- 100*(mean(regu.Ns)-N)/N
output <- list(mixt.bias=mixt.bias,
regu.bias=regu.bias,
mixt.ests=mixt.Ns,
regu.ests=regu.Ns)
return(output)
}
mixt.better <- function(simulation){
return(sum(abs(simulation$mixt.ests-N)<abs(simulation$regu.ests-N)))
}
# Select simulation parameters:
N <- 1000
pi.x <- 'pi.norm'
hr <- 'h1'
lambda <- 0.6
logphi1 <- c(0,-3)
logphi2 <- c(0,-4)
b <- c(1,-0.5)
w <- 0.05
ystart <- 0.1
Lsim <- 20
Asim <- Lsim*w*2
library(LT2D)
ystart = 0.1 ; w = 0.05 # These 2 parameters will remain constant for all data
set.seed(1)
simDat = simXY(500, 'pi.const', NULL, 'h1', c(1,-0.55), w, ystart)$locs
Lsim = 20 ; Asim = Lsim*w*2
sim.df = data.frame(x = simDat$x, y = simDat$y, stratum=rep(1,length(simDat$x)),
transect = rep(1,length(simDat$x)), L = Lsim, area = Asim,
object = 1:length(simDat$x),size = rep(1, length(simDat$x)))
logphi = c(0.01322874, -4.80826844)
T1 = LT2D.fit(DataFrameInput = sim.df, hr = 'h1', b=c(1,-0.55),
ystart=ystart,pi.x='pi.norm', logphi=logphi, w=w, hessian=T)
LT2D.bootstrap(T1)
LT2D.bootstrap(T1, 500)
LT2D.bootstrap(T1, 500)$ci
system.time(LT2D.bootstrap(T1, 500)$ci)
system.time(LT2D.bootstrap(T1, 500))
LT2D.bootstrap(T1, 1000)$ci
system.time(LT2D.bootstrap(T1, 500))
system.time(LT2D.bootstrap(T1, 1000))
system.time(LT2D.bootstrap(T1, 1000, parallel=F))
library(devtools)
setwd("~/github-cfj/LT2D-work/LT2D/R")
setwd("~/github-cfj/LT2D-work")
install('LT2D')
system.time(LT2D.bootstrap(T1, 1000, parallel=T))
system.time(LT2D.bootstrap(T1, 1000, parallel=T, slaves=3))
install('LT2D')
system.time(LT2D.bootstrap(T1, 1000, parallel=T, slaves=3))
system.time(LT2D.bootstrap(T1, 1000, parallel=T, slaves=2))
system.time(LT2D.bootstrap(T1, 1000, parallel=T, slaves=1))
library(snow)
install.packages(snow)
?snow.time
??snow.time
?parallel.time
dgamma
C_dgamma
.Call
?.Call
?integrate
integrate(function(x) x**2, 0, 1)
integrate(function(x) x**2, 0, 1)$value
integrate(function(x) x**2, 0, 1, abs.tol = 1e-20)$value
integrate(function(x) x**2, 0, 1, abs.tol = 1e-50)$value
integrate(function(x) x**2, 0, 1, abs.tol = 1e-100)$value
integrate(function(x) x**2, 0, 1, abs.tol = 1e-1000)$value
integrate(function(x) x**2, 0, 1, abs.tol = 1e-10000)$value
integrate(function(x) x**2, 0, 1)$value
gam <- function(z){
integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0, upper = Inf, z = z)
}
gam <- function(z){
integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0, upper = Inf, z = z)
return(integrate$value)
}
gam(1)
gam(2)
traceback()
gam <- function(z){
integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = .Machine$double.xmax, z = z)
return(integrate$value)
}
gam(2)
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = .Machine$double.xmax, z = z)
return(i$value)
}
gam(2)
gam(3)
gam(4)
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = 10, z = z)
return(i$value)
}
gam(4)
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = 100, z = z)
return(i$value)
}
gam(4)
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = 1000, z = z)
return(i$value)
}
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = 1000, z = z)
return(i$value)
}
gam(4)
gam(100)
factorial(100)
gam <- function(z){
i <- integrate(function(x, z) (x^(z-1))*exp(-x), lower = 0,
upper = 10000, z = z)
return(i$value)
}
gam(100)
cont.pois <- function(x, lambda){
pnorm(x, lambda, sqrt(lambda))
}
cont.pois(1,5)
dpois(1,5)
dpois(1,50)
dcpois <- function(x, lambda){
pnorm(x, lambda, sqrt(lambda))
}
dpois(1,50)
dcpois(1,50)
dcpois(20,50)
dpois(20,50)
dpois(20,500)
dcpois(20,500)
dcpois(250,500)
dpois(250,500)
plot(dcpois)
plot(dpois)
plot(1:30, dpois(1:30, 15))
plot(1:30, dcpois(1:30, 15))
dcpois <- function(x, lambda){
dnorm(x, lambda, sqrt(lambda))
}
plot(1:30, dcpois(1:30, 15))
plot(1:30, dcpois(1:30, 15), type='l')
plot(1:30, dpois(1:30, 15), type='l', add=T, col='red')
gamma <- function(alpha){
return((dgamma(1,alpha,1)*exp(1))^-1
}
gamma <- function(alpha){
return((dgamma(1,alpha,1)*exp(1))^-1)
}
gamma(1)
gamma(2)
gamma(3)
gamma(4)
gamma(5)
gamma(6)
gamma(7)
gamma(8)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
den <- gamma(x-1)
return(num/den)
}
pcpois(1,3)
gamma(1)
gamma(0)
is(0, 0.00000000000000000001, tol = ie-20)
is(0, 0.00000000000000000001)
isequal
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 0 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(0, x, tol=1e-20), gamma(x-1), 1)
return(num/den)
}
pcpois(1,3)
pcpois(0,3)
pcpois(2,3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 0 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(0, x, tol=1e-20), 1, gamma(x-1))
return(num/den)
}
pcpois(2,3)
all.equal(0, 0.001, tol=1e-20)
a = all.equal(0, 0.001, tol=1e-20)
a$
1
a
a = all.equal(0, 0.00000000001, tol=1e-20)
a
?all.equal
all.equal(0, 0.01, tol=1e-3
)
all.equal(0, 0.0001, tol=1e-3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 0 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(0, x, tol=1e-15)==TRUE, 1, gamma(x-1))
return(num/den)
}
pcpois(2,3)
pcpois(1,3)
pcpois(0,3)
pcpois(1,3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==TRUE, 1, gamma(x-1))
return(num/den)
}
pcpois(1,3)
pcpois(0,3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x-1))
return(num/den)
}
pcpois(0,3)
pcpois(1,3)
pcpois(2,3)
pcpois(3,3)
pcpois(4,3)
ppois(4,3)
gamma(2)
gamma(3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x+1))
return(num/den)
}
ppois(4,3)
pcpois(4,3)
pcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x+1))
print(num)
print(den)
return(num/den)
}
pcpois(4,3)
pcpois(3,3)
pcppois(1:2, 4)
pcpois(1:2, 4)
sum(pcpois(0:200, 4))
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x+1))
return(num/den)
}
dpois(0,2)
dcpois(1,2)
dcpois(0,2)
for (i in 1:20){
cat('dpois',i,':',dpois(i, 10))
cat('dcpois',i,':',dcpois(i, 10))
}
for (i in 1:20){
cat('dpois',i,':',dpois(i, 10))
cat('dcpois',i,':',dcpois(i, 10))
cat('\n')
}
dpois(1:20,10) - dcpois(1:20, 10)
dpois(1:20,10)
dcpois(1:20, 10)
dcpois(1:2, 10)
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x+1))
print(nom)
print(den)
return(num/den)
}
dcpois(0,5)
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- ifelse(all.equal(1, x, tol=1e-15)==T | all.equal(0, x, tol=1e-15)==T,
1, gamma(x+1))
print(num)
print(den)
return(num/den)
}
dcpois(0,5)
dcpois(1,5)
dcpois(2,5)
dcpois(3,5)
dcpois(4,5)
dcpois(1:10,5)
dcpois(1:10,10)
?sapply
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- vapply(x, function(x) ifelse(all.equal(1, x, tol=1e-15)==T |
all.equal(0, x, tol=1e-15)==T,1,
gamma(x+1)))
print(num)
print(den)
return(num/den)
}
dcpois(1:10,5)
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to if else, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- sapply(x, function(x) ifelse(all.equal(1, x, tol=1e-15)==T |
all.equal(0, x, tol=1e-15)==T,1,
gamma(x+1)))
print(num)
print(den)
return(num/den)
}
dcpois(1:10,5)
dcpois <- function(x, lambda){
# purpose : evaluates a continuous version of the Poisson distribution by
#           using the gamma function as a continuous analogue to the factorial
#           function
# inputs  : lambda - Scalar or vector data, counts of events in a given
#                    interval
#           lambda - The average number of events in the given interval
# output  : Scalar or vector, the pdf of x given lambda
num <- exp(-lambda)*(lambda^x)
# We work out the denominator with a call to ifelse, to deal with factorial
# 1 needing to equal 1, but gamma(0) = Inf
den <- sapply(x, function(x) ifelse(all.equal(1, x, tol=1e-15)==T |
all.equal(0, x, tol=1e-15)==T,1,
gamma(x+1)))
return(num/den)
}
dcpois(1:10,5)
dpois(1:10,5)
integrate(dcpois, lower=0, upper=Inf, lambda=1)
integrate(dcpois, lower=0, upper=Inf, lambda=2)
integrate(dcpois, lower=0, upper=Inf, lambda=3)
integrate(dcpois, lower=0, upper=Inf, lambda=0.1)
integrate(dpois, lower=0, upper=Inf, lambda=0.1)
dpois(1:100, 10) - dcpois(1:100, 10)
sum(dpois(1:100, 10) - dcpois(1:100, 10))
